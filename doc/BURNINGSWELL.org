* My Guix Systems
** Boombaclaat
*** Harddisk

List disk partitions.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  fdisk -l /dev/nvme0n1
#+end_src

#+RESULTS:
#+begin_example
Disk /dev/nvme0n1: 1.82 TiB, 2001111162880 bytes, 488552530 sectors
Disk model: APPLE SSD AP2048R
Units: sectors of 1 * 4096 = 4096 bytes
Sector size (logical/physical): 4096 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes
Disklabel type: gpt
Disk identifier: A67A7E47-AE3F-436F-9BF7-9DCBCB1151C5

Device             Start       End   Sectors   Size Type
/dev/nvme0n1p1         6    128005    128000   500M Apple Silicon boot
/dev/nvme0n1p2    128006  24542067  24414062  93.1G Apple APFS
/dev/nvme0n1p3  24542068  25152371    610304   2.3G Apple APFS
/dev/nvme0n1p4  25152372  25274483    122112   477M EFI System
/dev/nvme0n1p5  25274484 195440499 170166016 649.1G Linux filesystem
/dev/nvme0n1p6 195440500 196050803    610304   2.3G Apple APFS
/dev/nvme0n1p7 196050804 196172915    122112   477M EFI System
/dev/nvme0n1p8 487241816 488552524   1310709     5G Apple Silicon recovery
/dev/nvme0n1p9 196173056 418995455 222822400   850G Linux filesystem

Partition table entries are not in disk order.
#+end_example

Create the LUKS encrypted container in partition =/dev/nvme0n1p9=.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  cryptsetup luksFormat --label cryptroot --type luks1 /dev/nvme0n1p9
#+end_src

Open the LUKS partition.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  cryptsetup luksOpen /dev/nvme0n1p9 cryptroot
#+end_src

Create a physical volume in the partition.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  pvcreate /dev/mapper/cryptroot
#+end_src

#+RESULTS:
:   Physical volume "/dev/mapper/cryptroot" successfully created.

Create a volume group in the physical volume, named =bombaclaat=.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  vgcreate bombaclaat /dev/mapper/cryptroot
#+end_src

#+RESULTS:
:   Volume group "bombaclaat" successfully created

Create a logical volume for the swap partition.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  lvcreate --size 34G bombaclaat --name swap
#+end_src

#+RESULTS:
:   Logical volume "swap" created.

Create a logical volume for the =root= partition.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  lvcreate -l 100%FREE bombaclaat --name root
#+end_src

#+RESULTS:
:   Logical volume "root" created.

Format the filesystem and swap partitions.

#+begin_src sh :exports both :dir /sudo:: :results silent
  mkfs.ext4 -L root /dev/bombaclaat/root
  mkswap --label swap /dev/bombaclaat/swap
#+end_src

#+RESULTS:
#+begin_example
Creating filesystem with 346029056 4k blocks and 86507520 inodes
Filesystem UUID: 8842a70f-fdc3-40e0-aa81-66940ddb32c3
Superblock backups stored on blocks:
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968,
	102400000, 214990848

Allocating group tables:     0/10560           done
Writing inode tables:     0/10560           done
Creating journal (262144 blocks): done
Writing superblocks and filesystem accounting information:     0/10560           done

Creating filesystem with 52428800 4k blocks and 13107200 inodes
Filesystem UUID: ecdf5cce-f306-4165-864c-49e2518c1619
Superblock backups stored on blocks:
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
	4096000, 7962624, 11239424, 20480000, 23887872

Allocating group tables:    0/1600         done
Writing inode tables:    0/1600         done
Creating journal (262144 blocks): done
Writing superblocks and filesystem accounting information:    0/1600         done

Setting up swapspace version 1, size = 16 GiB (17179852800 bytes)
LABEL=swap, UUID=cf679d9a-9498-42c9-84ea-c21f14601c25
#+end_example

*** File systems

Mount the filesystems.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  mount /dev/bombaclaat/root /mnt
  mount --mkdir /dev/nvme0n1p7 /mnt/boot/efi
  swapon /dev/bombaclaat/swap
#+end_src

#+RESULTS:

Unmount the filesystems.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  swapoff /dev/bombaclaat/swap
  umount /mnt/boot/efi
  umount /mnt
#+end_src

*** Guix Configuration

List the UUIDs of the partitions.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  blkid
#+end_src

#+RESULTS:
#+begin_example
/dev/mapper/bombaclaat-swap: LABEL="swap" UUID="ce630ee0-04f0-4e37-9ec7-1efd08b14050" TYPE="swap"
/dev/nvme0n1p9: UUID="56b68fba-21cb-49b5-ac44-84dc382f3426" TYPE="crypto_LUKS" PARTUUID="ba253f57-3e75-b142-9bf5-e5351ad18caa"
/dev/nvme0n1p7: LABEL_FATBOOT="EFI - UEFI" LABEL="EFI - UEFI" UUID="9FBE-130E" BLOCK_SIZE="4096" TYPE="vfat" PARTUUID="376f4ff5-3a94-4151-baef-59466fb35801"
/dev/nvme0n1p5: LABEL="asahi-root" UUID="5d3f0ec5-c6a3-41a2-a181-6fc49279239d" BLOCK_SIZE="4096" TYPE="ext4" PARTUUID="33fa19cc-7269-4916-8d66-f9bc55adef90"
/dev/nvme0n1p3: UUID="f3b2124c-3c4d-49ef-9945-dca555185dbd" BLOCK_SIZE="4096" TYPE="apfs" PARTUUID="c8770a42-bbdd-4dd9-9312-d2df91d8dc10"
/dev/nvme0n1p1: UUID="743ec7b4-1da1-4d90-a575-1b2e149c999d" BLOCK_SIZE="4096" TYPE="apfs" PARTLABEL="iBootSystemContainer" PARTUUID="5eb3f5e3-071e-4fac-be15-232d314b9c94"
/dev/nvme0n1p8: UUID="50df1db6-e408-463a-a121-7ba8203da3c5" BLOCK_SIZE="4096" TYPE="apfs" PARTLABEL="RecoveryOSContainer" PARTUUID="c7f84b19-2d15-4e82-b23d-9bead07f7570"
/dev/nvme0n1p6: UUID="96427d1c-ff6c-44d7-84bf-7082e3748c0a" BLOCK_SIZE="4096" TYPE="apfs" PARTUUID="30738918-6131-4967-8474-b94decdc238e"
/dev/nvme0n1p4: LABEL_FATBOOT="EFI - ASAHI" LABEL="EFI - ASAHI" UUID="35B7-2F3A" BLOCK_SIZE="4096" TYPE="vfat" PARTUUID="5fd144d2-2e4c-46f4-8de5-c9c3020105dd"
/dev/nvme0n1p2: UUID="f7040a26-c920-451c-9f01-9850f32725c6" BLOCK_SIZE="4096" TYPE="apfs" PARTLABEL="Container" PARTUUID="03752c1b-d126-4932-9be0-838f12ab4086"
/dev/mapper/bombaclaat-root: LABEL="root" UUID="ee886222-468a-41d3-965d-add8f2c95003" BLOCK_SIZE="4096" TYPE="ext4"
/dev/mapper/cryptroot: UUID="8X2AnN-OLVX-foTL-wAEs-0Lwe-GaI0-PK08Rx" TYPE="LVM2_member"
/dev/sda2: LABEL="Guix_image" UUID="416bf41b-f6b1-2062-ba06-4196416bf41b" BLOCK_SIZE="4096" TYPE="ext4"
/dev/sda1: SEC_TYPE="msdos" LABEL_FATBOOT="GNU-ESP" LABEL="GNU-ESP" UUID="72A9-2BFE" BLOCK_SIZE="512" TYPE="vfat"
#+end_example

Update UUIDs in =r0man/guix/system/bombaclaat.scm=.

*** Image

Build the Guix system image.

#+begin_src sh :exports both :results verbatim
  guix system image -L . --image-type=efi-raw --system=aarch64-linux r0man/guix/system/bombaclaat.scm
#+end_src

Or, build the image with the Guix time machine.

#+begin_src sh :exports both :results verbatim
  guix time-machine -C r0man/guix/system/channels.scm -- system image -L . --image-type=efi-raw --system=aarch64-linux r0man/guix/system/bombaclaat.scm
#+end_src

Write the image to the USB stick at =/dev/sda=.

#+begin_src sh :results verbatim
  sudo dd if=/gnu/store/65j2k2drs2pl6fngkpifwxffjsdsz0x6-disk-image of=/dev/sda bs=4M status=progress oflag=sync
#+end_src

*** System

Initialize the system using the mounted file systems in =/mnt=.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  guix system init -L . --system=aarch64-linux r0man/guix/system/bombaclaat.scm /mnt
#+end_src

Or, initialize the system with the Guix time machine.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  guix time-machine -C r0man/guix/system/channels.scm -- system init -L . --system=aarch64-linux r0man/guix/system/bombaclaat.scm /mnt
#+end_src

Copy the channels to =/mnt/etc/channels.scm=.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  mkdir -p /mnt/etc/guix
  cp r0man/guix/system/channels.scm /mnt/etc/guix/channels.scm
#+end_src

#+RESULTS:

Copy the system configuration to =/mnt/etc/config.scm=.

#+begin_src sh :exports both :dir /sudo:: :results verbatim
  cp r0man/guix/system/bombaclaat.scm /mnt/etc/config.scm
#+end_src

** Burningswell
*** Disk Setup

Stop already running RAID 1.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  mdadm --stop /dev/md0
  mdadm --stop /dev/md1
  mdadm --stop /dev/md2
  mdadm --stop /dev/md3
  cat /proc/mdstat
#+end_src

#+RESULTS:
: Personalities : [raid1]
: unused devices: <none>

If the device is being reused or re-purposed from an existing array,
erase any old RAID configuration information.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  mdadm --misc --zero-superblock /dev/sda1
  mdadm --misc --zero-superblock /dev/sda2
  mdadm --misc --zero-superblock /dev/sda3
  mdadm --misc --zero-superblock /dev/sdb1
  mdadm --misc --zero-superblock /dev/sdb2
  mdadm --misc --zero-superblock /dev/sdb3
#+end_src

#+RESULTS:

Partition the hard drives. Start at 2MB, to make Grub2 happy.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  for device in /dev/sda /dev/sdb ; do
      parted $device --script -- mklabel gpt
      parted $device --script -- mkpart primary 0MB 2MB
      parted $device --script -- set 1 bios_grub
      parted $device --script -- mkpart primary ext4 2MB 512MB
      parted $device --script -- mkpart primary linux-swap 512MB 2150MB
      parted $device --script -- mkpart primary ext4 2150MB -1
      parted $device --script -- set 2 raid on
      parted $device --script -- set 3 raid on
      parted $device --script -- set 4 raid on
      parted $device --script -- print
  done
#+end_src

#+RESULTS:
#+begin_example
Model: ATA Micron_1100_MTFD (scsi)
Disk /dev/sda: 512GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name     Flags
 1      17.4kB  2000kB  1983kB               primary  bios_grub
 2      2097kB  512MB   510MB                primary  raid
 3      512MB   2150MB  1638MB               primary  raid
 4      2150MB  512GB   510GB                primary  raid

Model: ATA Micron_1100_MTFD (scsi)
Disk /dev/sdb: 512GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name     Flags
 1      17.4kB  2000kB  1983kB               primary  bios_grub
 2      2097kB  512MB   510MB                primary  raid
 3      512MB   2150MB  1638MB               primary  raid
 4      2150MB  512GB   510GB                primary  raid

#+end_example

Create RAID 1 array.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  yes | mdadm --create --level=1 --metadata=1.2 --raid-devices=2 /dev/md0 /dev/sda1 /dev/sdb1
  yes | mdadm --create --level=1 --metadata=1.2 --raid-devices=2 /dev/md1 /dev/sda2 /dev/sdb2
  yes | mdadm --create --level=1 --metadata=1.2 --raid-devices=2 /dev/md2 /dev/sda3 /dev/sdb3
  yes | mdadm --create --level=1 --metadata=1.2 --raid-devices=2 /dev/md3 /dev/sda4 /dev/sdb4
  cat /proc/mdstat
#+end_src

#+RESULTS:
#+begin_example
Personalities : [raid1]
md3 : active raid1 sdb4[1] sda4[0]
      497874944 blocks super 1.2 [2/2] [UU]
      	resync=DELAYED
      bitmap: 4/4 pages [16KB], 65536KB chunk

md1 : active raid1 sdb2[1] sda2[0]
      496640 blocks super 1.2 [2/2] [UU]
      [======>..............]  resync = 33.6% (167680/496640) finish=0.0min speed=167680K/sec

md0 : active raid1 sdb1[1] sda1[0]
      896 blocks super 1.2 [2/2] [UU]

md2 : active raid1 sdb3[1] sda3[0]
      1597440 blocks super 1.2 [2/2] [UU]
      	resync=DELAYED

unused devices: <none>
#+end_example

Create filesystems.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  mkfs.ext4 -L boot /dev/md1
  mkswap -L swap /dev/md2
  mkfs.ext4 -L root /dev/md3
#+end_src

#+RESULTS:
#+begin_example
Discarding device blocks:   1024/496640             done
Creating filesystem with 496640 1k blocks and 124440 inodes
Filesystem UUID: 05d317fc-f29f-446e-88c9-653fe23b2238
Superblock backups stored on blocks:
	8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409

Allocating group tables:  0/61     done
Writing inode tables:  0/61     done
Creating journal (8192 blocks): done
Writing superblocks and filesystem accounting information:  0/61     done

Setting up swapspace version 1, size = 1.5 GiB (1635774464 bytes)
LABEL=swap, UUID=cfa41e4a-6648-47bb-a0b8-e43e25519880
Discarding device blocksdone
Creating filesystem with 124468736 4k blocks and 31121408 inodes
Filesystem UUID: 84333e36-851f-40d1-83b4-6e347042a9f1
Superblock backups stored on blocks:
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968,
	102400000

Allocating group tables:    0/3799         done
Writing inode tables:    0/3799         done
Creating journal (262144 blocks): done
Writing superblocks and filesystem accounting information:    0/3799         done

#+end_example

Mount partitions.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  mount /dev/md3 /mnt
  mkdir -p /mnt/boot
  mount /dev/md1 /mnt/boot
  swapon /dev/md2
#+end_src

#+RESULTS:

*** Installation

Install Guix on the rescue system.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  apt-get install guix
#+end_src

#+RESULTS:
: guix is already the newest version (1.2.0-4).
: 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  git clone git@github.com:r0man/guix-system.git
#+end_src

Build the Guix system image.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~/guix-system :results verbatim
  guix system build -L . r0man/guix/system/burningswell.scm
#+end_src

Initialize the Guix system at =/mnt=.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~/guix-system :results verbatim
  guix system init --load-path=. r0man/guix/system/burningswell.scm /mnt
#+end_src

*** VM

Build the system image in the =qcow2= format.

#+begin_src sh :exports both :results verbatim
  guix system image -L . -t qcow2 r0man/guix/system/burningswell.scm
#+end_src

Build the system image in the =qcow2= format.

#+begin_src sh
  qemu-system-x86_64 \
      -snapshot \
      -nic user,model=virtio-net-pci \
      -enable-kvm -m 2048 \
      -device virtio-blk,drive=myhd \
      -drive if=none,file=burningswell.qcow2,id=myhd
#+end_src

Run with RAID-1 and =virtio= (WIP)

#+begin_src sh
  qemu-system-x86_64 \
      -snapshot \
      -nic user,model=virtio-net-pci \
      -enable-kvm -m 2048 \
      -device virtio-blk,drive=sda \
      -device virtio-blk,drive=sdb \
      -drive if=none,file=burningswell.qcow2,id=sda \
      -drive if=none,file=burningswell.qcow2,id=sdb
#+end_src

Run with RAID-1 and =megasas= (WIP)

#+begin_src sh
  qemu-system-x86_64 \
      -snapshot \
      -enable-kvm -m 2048 \
      -nic user,model=virtio-net-pci \
      -hda burningswell.qcow2 -serial stdio \
      -device megasas,id=scsi0 \
      -device scsi-hd,drive=drive0,bus=scsi0.0,channel=0,scsi-id=0,lun=0 \
      -drive file=burningswell.qcow2,if=none,id=drive0 \
      -device scsi-hd,drive=drive1,bus=scsi0.0,channel=0,scsi-id=1,lun=0 \
      -drive file=burningswell.qcow2,if=none,id=drive1
#+end_src
