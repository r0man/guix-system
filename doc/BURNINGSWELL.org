* Burningswell
** Disk Setup

Stop already running RAID 1.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  mdadm --stop /dev/md0
  mdadm --stop /dev/md1
  mdadm --stop /dev/md2
  mdadm --stop /dev/md3
  cat /proc/mdstat
#+end_src

#+RESULTS:
: Personalities : [raid1]
: unused devices: <none>

If the device is being reused or re-purposed from an existing array,
erase any old RAID configuration information.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  mdadm --misc --zero-superblock /dev/sda1
  mdadm --misc --zero-superblock /dev/sda2
  mdadm --misc --zero-superblock /dev/sda3
  mdadm --misc --zero-superblock /dev/sdb1
  mdadm --misc --zero-superblock /dev/sdb2
  mdadm --misc --zero-superblock /dev/sdb3
#+end_src

#+RESULTS:

Partition the hard drives. Start at 2MB, to make Grub2 happy.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  for device in /dev/sda /dev/sdb ; do
      parted $device --script -- mklabel gpt
      parted $device --script -- mkpart primary 0MB 2MB
      parted $device --script -- set 1 bios_grub
      parted $device --script -- mkpart primary ext4 2MB 512MB
      parted $device --script -- mkpart primary linux-swap 512MB 2150MB
      parted $device --script -- mkpart primary ext4 2150MB -1
      parted $device --script -- set 2 raid on
      parted $device --script -- set 3 raid on
      parted $device --script -- set 4 raid on
      parted $device --script -- print
  done
#+end_src

#+RESULTS:
#+begin_example
Model: ATA Micron_1100_MTFD (scsi)
Disk /dev/sda: 512GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name     Flags
 1      17.4kB  2000kB  1983kB               primary  bios_grub
 2      2097kB  512MB   510MB                primary  raid
 3      512MB   2150MB  1638MB               primary  raid
 4      2150MB  512GB   510GB                primary  raid

Model: ATA Micron_1100_MTFD (scsi)
Disk /dev/sdb: 512GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name     Flags
 1      17.4kB  2000kB  1983kB               primary  bios_grub
 2      2097kB  512MB   510MB                primary  raid
 3      512MB   2150MB  1638MB               primary  raid
 4      2150MB  512GB   510GB                primary  raid

#+end_example

Create RAID 1 array.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  yes | mdadm --create --level=1 --metadata=1.2 --raid-devices=2 /dev/md0 /dev/sda1 /dev/sdb1
  yes | mdadm --create --level=1 --metadata=1.2 --raid-devices=2 /dev/md1 /dev/sda2 /dev/sdb2
  yes | mdadm --create --level=1 --metadata=1.2 --raid-devices=2 /dev/md2 /dev/sda3 /dev/sdb3
  yes | mdadm --create --level=1 --metadata=1.2 --raid-devices=2 /dev/md3 /dev/sda4 /dev/sdb4
  cat /proc/mdstat
#+end_src

#+RESULTS:
#+begin_example
Personalities : [raid1]
md3 : active raid1 sdb4[1] sda4[0]
      497874944 blocks super 1.2 [2/2] [UU]
      	resync=DELAYED
      bitmap: 4/4 pages [16KB], 65536KB chunk

md1 : active raid1 sdb2[1] sda2[0]
      496640 blocks super 1.2 [2/2] [UU]
      [======>..............]  resync = 33.6% (167680/496640) finish=0.0min speed=167680K/sec

md0 : active raid1 sdb1[1] sda1[0]
      896 blocks super 1.2 [2/2] [UU]

md2 : active raid1 sdb3[1] sda3[0]
      1597440 blocks super 1.2 [2/2] [UU]
      	resync=DELAYED

unused devices: <none>
#+end_example
** File systems

Create filesystems.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  mkfs.ext4 -L boot /dev/md1
  mkswap -L swap /dev/md2
  mkfs.ext4 -L root /dev/md3
#+end_src

#+RESULTS:
#+begin_example
Discarding device blocks:   1024/496640             done
Creating filesystem with 496640 1k blocks and 124440 inodes
Filesystem UUID: 05d317fc-f29f-446e-88c9-653fe23b2238
Superblock backups stored on blocks:
	8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409

Allocating group tables:  0/61     done
Writing inode tables:  0/61     done
Creating journal (8192 blocks): done
Writing superblocks and filesystem accounting information:  0/61     done

Setting up swapspace version 1, size = 1.5 GiB (1635774464 bytes)
LABEL=swap, UUID=cfa41e4a-6648-47bb-a0b8-e43e25519880
Discarding device blocksdone
Creating filesystem with 124468736 4k blocks and 31121408 inodes
Filesystem UUID: 84333e36-851f-40d1-83b4-6e347042a9f1
Superblock backups stored on blocks:
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968,
	102400000

Allocating group tables:    0/3799         done
Writing inode tables:    0/3799         done
Creating journal (262144 blocks): done
Writing superblocks and filesystem accounting information:    0/3799         done

#+end_example

Mount partitions.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  mount /dev/md3 /mnt
  mkdir -p /mnt/boot
  mount /dev/md1 /mnt/boot
  swapon /dev/md2
#+end_src

#+RESULTS:

** Installation

Install Guix on the rescue system.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  apt-get install guix
#+end_src

#+RESULTS:
: guix is already the newest version (1.2.0-4).
: 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~ :results verbatim
  git clone git@github.com:r0man/guix-system.git
#+end_src

Build the Guix system image.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~/guix-system :results verbatim
  guix system build -L . r0man/guix/system/burningswell.scm
#+end_src

Initialize the Guix system at =/mnt=.

#+begin_src sh :exports both :dir /ssh:root@burningswell.com:~/guix-system :results verbatim
  guix system init --load-path=. r0man/guix/system/burningswell.scm /mnt
#+end_src

** System

Build the system image in the =qcow2= format.

#+begin_src sh :exports both :results verbatim
  guix system image -L . -t qcow2 r0man/guix/system/burningswell.scm
#+end_src

Build the system image in the =qcow2= format.

#+begin_src sh
  qemu-system-x86_64 \
      -snapshot \
      -nic user,model=virtio-net-pci \
      -enable-kvm -m 2048 \
      -device virtio-blk,drive=myhd \
      -drive if=none,file=burningswell.qcow2,id=myhd
#+end_src

Run with RAID-1 and =virtio= (WIP)

#+begin_src sh
  qemu-system-x86_64 \
      -snapshot \
      -nic user,model=virtio-net-pci \
      -enable-kvm -m 2048 \
      -device virtio-blk,drive=sda \
      -device virtio-blk,drive=sdb \
      -drive if=none,file=burningswell.qcow2,id=sda \
      -drive if=none,file=burningswell.qcow2,id=sdb
#+end_src

Run with RAID-1 and =megasas= (WIP)

#+begin_src sh
  qemu-system-x86_64 \
      -snapshot \
      -enable-kvm -m 2048 \
      -nic user,model=virtio-net-pci \
      -hda burningswell.qcow2 -serial stdio \
      -device megasas,id=scsi0 \
      -device scsi-hd,drive=drive0,bus=scsi0.0,channel=0,scsi-id=0,lun=0 \
      -drive file=burningswell.qcow2,if=none,id=drive0 \
      -device scsi-hd,drive=drive1,bus=scsi0.0,channel=0,scsi-id=1,lun=0 \
      -drive file=burningswell.qcow2,if=none,id=drive1
#+end_src
